import Skeleton from 'react-loading-skeleton';
import {
  Box,
  Text,
  Tabs,
  Select,
  Button,
  PageTitle,
  EmptyState,
} from '@flexisaf/flexibull2';
import styled from 'styled-components';
import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';

import { CourseView, SimpleEnrolledCourseView } from 'generated/index';
import courseBanner from 'assets/images/course-page-banner.svg';
import { CourseCard } from 'components/courseCard/courseCard';
import { ViewMode, ViewToggler } from 'components/viewToggler/viewToggler';
import { GetCoursesParam, useGetCoursesMineQuery } from '../course-api';
import { SearchBar } from 'components/searchBar/searchBar';
import { useCoursesEnrollment } from 'hooks/courses/useCourseEnrollment';

const CoursesPage = () => {
  const [coursesListParams, setCoursesListParams] = useState<GetCoursesParam>({
    size: 100,
    sortField: 'TITLE',
    sortOrder: 'ASC',
  });
  const { data: coursesListData, isLoading } =
    useGetCoursesMineQuery(coursesListParams);

  const { enrolledCourses } = useCoursesEnrollment();

  const updateCoursesParams = (params: GetCoursesParam) =>
    setCoursesListParams((prev) => ({ ...prev, ...params }));

  return (
    <>
      <PageTitle>
        <Link to="/courses"> Courses </Link>
      </PageTitle>
      <Box pad="1.5rem" className="flex flex-col gap-8">
        <CoursesSplash />

        <CoursesListSection
          isLoadingCourses={isLoading}
          coursesList={coursesListData?.items ?? []}
          enrolledList={enrolledCourses}
          coursesParams={coursesListParams}
          updateParams={updateCoursesParams}
        />
      </Box>
    </>
  );
};

const CoursesSplash = () => {
  return (
    <Box className="flex flex-col md:flex-row gap-[24px] justify-between">
      <Box
        className="w-[173px] h-[130px] md:w-5/12 mx-auto self-center  md:min-h-[330px] bg-contain bg-no-repeat bg-center"
        style={{ backgroundImage: `url(${courseBanner})` }}
      ></Box>
      <Box className="flex flex-col text-center  md:text-left gap-[24px] md:order-first md:max-w-[584px] r ">
        <Text block className="font-[700] text-[28px] md:text-[38px]">
          Build complete course modules in seconds, with zero hassle.
        </Text>

        <Text className="text-gray-500 leading-[25px] text-sm">
          From lesson outlines to reading lists and assignments, everything you
          need to stay ahead, all in one place
        </Text>
        <Link to="generate-course">
          <GenerateButton className="md:w-[max-content]">
            <span className="inline-block mr-1">Generate course</span>
            <i className="saf-magic-star text-[16px] " />
          </GenerateButton>
        </Link>
      </Box>
    </Box>
  );
};

interface CoursesListProps {
  coursesList: CourseView[];
  enrolledList: SimpleEnrolledCourseView[];
  coursesParams: GetCoursesParam;
  updateParams: (params: GetCoursesParam) => void;
  isLoadingCourses?: boolean;
}

const CoursesListSection = (props: CoursesListProps) => {
  const {
    coursesList,
    isLoadingCourses,
    coursesParams,
    updateParams,
    enrolledList,
  } = props;
  const [viewMode, setViewMode] = useState<ViewMode>(ViewMode.List);
  const navigate = useNavigate();

  const onOpenCourse = (course: CourseView) => {
    if (!course.id) return;
    const coursePath = `/courses/${course.id}`;
    navigate(coursePath);
  };

  const onSearch = (keyword: string) => updateParams({ keyword });

  const isCoursesEmpty = coursesList.length < 1;

  const renderCoursesListView = (isEnrolled = false) => {
    if (isLoadingCourses) return <CoursesSkeletonLoadingIndicator />;
    if (isCoursesEmpty) {
      return (
        <EmptyState
          title="No courses found"
          info="Please click the generate course button to create a new one"
          style={{ width: '100%' }}
        />
      );
    }
    console.log(enrolledList);
    let courses;

    if (isEnrolled) {
      courses = coursesList.filter((c) =>
        enrolledList.some((e) => e.courseId === c.id)
      );
    } else {
      courses = coursesList;
    }

    return (
      <div className="grid grid-cols-1 gap-4 md:grid-cols-4">
        {courses.map((course, index) => (
          <CourseCard
            key={index}
            title={course.title ?? 'Unknown'}
            coverImageUrl={course.coverImageUrl}
            onActionClick={() => course && onOpenCourse(course)}
            // TODO: we need a field to indicate if  a course has been started
            isInProgress={false}
          />
        ))}
      </div>
    );
  };

  return (
    <Tabs responsive={false} bgColor="none" style={{ maxWidth: '100%' }}>
      <Box label="Generated By Me">
        <div>
          <div className="pt-8 ">
            <div className="flex flex-col mb-6 text-center md:text-left gap-2  md:(text-left)">
              <Text className="text-blue-grey-900 leading-[25px] text-sm">
                Your Personal Collection
              </Text>
              <Text block className="font-[700] text-[22px] ">
                Courses generated by you
              </Text>
            </div>

            <div className="flex justify-end md:justify-between items-center  mb-6">
              <div className="flex gap-2 md:w-7/12">
                <div className="w-10/12 md:w-[240px]">
                  <SearchBar
                    value={coursesParams.keyword}
                    placeholder="Search courses"
                    // style={{ width: '100%', display: 'inline-block' }}
                    onChange={onSearch}
                  />
                </div>
                <Select options={[]} placeholder="Level" />
              </div>
            </div>

            <div className="view-mode-wrapper flex justify-end md:hidden pb-2 border-b mb-6">
              <ViewToggler viewMode={viewMode} setViewMode={setViewMode} />
            </div>
          </div>
          {renderCoursesListView()}
        </div>
      </Box>
      <Box label="Study Deck">
        <div>{renderCoursesListView(true)}</div>
      </Box>
    </Tabs>
  );
};

const CoursesSkeletonLoadingIndicator = () => {
  return (
    <div className="grid items-center grid-cols-1 md:grid-cols-4 gap-4">
      <Skeleton height={320} />
      <Skeleton height={320} />
      <Skeleton height={320} />
      <Skeleton height={320} />
      <Skeleton height={320} />
      <Skeleton height={320} />
      <Skeleton height={320} />
      <Skeleton height={320} />
    </div>
  );
};

const GenerateButton = styled(Button)`
  background: linear-gradient(
    95.05deg,
    #7586e0 1.15%,
    #1a46c1 50.74%,
    #123189 96.12%
  );
  height: 45px;
`;

export default CoursesPage;
